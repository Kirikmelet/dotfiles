/* Search bar shit */

import { itemList, mainList, imgList } from './db.js'
import { removeTable, addTable, addCheck } from './main.js'

interface classSettings {
  grid: string,
  db: imgList[],
  list: itemList[],
  maxNum?: number
}

export class FoodGrid {
  public curNum: number = 0
  public colNum: [number, number] = [0, 1]
  constructor () {}
  setup (grid: classSettings): number {
    if (!grid.maxNum) { grid.maxNum = 2 }
    let itemArr: HTMLElement | null = document.querySelector(grid.grid)
    this._genGrid(grid, <HTMLElement> itemArr)
    this.registerClicks(grid, <HTMLElement> itemArr, 'img')
    this._handleHL(grid, <HTMLElement> itemArr, 'img')
    return 1
  }
  registerClicks (grid: classSettings, gridEl: HTMLElement, tarEl: string): number {

    let clickTar: HTMLImageElement[] | null = Array.from(gridEl.querySelectorAll(tarEl))
    clickTar.forEach((ev: HTMLImageElement, ind: number) => {
      ev.onclick = (event: Event) => {
        this._handleClick(event, grid.list)
        this._handleHL(grid, gridEl, tarEl)
      }
      return 1
    })
    return 1
  }
  private _getInGrid (gridEl: HTMLElement, tarEl: string): number {
    return Array.from(gridEl.querySelectorAll(tarEl)).length
  }
  private _genGrid (grid: classSettings, gridEl: HTMLElement): number {
    let stopSign: boolean = false
    let gridArr: HTMLImageElement[] = []
    let gridRow: HTMLTableElement = <HTMLTableElement> document.createElement('TR')
    grid.db.every((_ev: imgList, ind: number) => {
      gridArr[ind] = <HTMLImageElement> document.createElement('IMG')
      gridArr[ind].src = grid.db[ind].img
      gridArr[ind].id = grid.db[ind].name
      gridRow.appendChild(gridArr[ind])
      if (gridEl >= grid.maxNum!) {
        stopSign = true
        return 0
      }
      return 1
    })
    if (!stopSign) { this._genGrid(grid, gridEl) }
    gridEl.appendChild(gridRow) 
    return 1
  }
  private _handleClick (ev: Event, list: itemList[]): number {
    let valueEl =  (<HTMLElement> ev.target).id
    let getVal: number = 0
    list.every((nEv: itemList, ind: number) => {
      if (nEv.name.toLocaleLowerCase() === valueEl.toLocaleLowerCase()) {
        getVal = ind
        return 0
      } else { return 1 }
    })
    this.colNum[this.curNum] = getVal
    this.curNum = (this.curNum === 0) ? 1 : 0
    removeTable()
    addTable(this.colNum)
    addCheck()
    return 1
  }
  private _handleHL (grid: classSettings, gridEl: HTMLElement, tarEl: string) {
    let childEls: HTMLElement[] | null = Array.from(document.querySelectorAll(tarEl))
    childEls.forEach((ev: HTMLElement, ind: number) => {
      if (this.colNum.includes(ind)) {
        ev.classList.add('marked')
      } else { ev.classList.remove('marked') }
    })
  }
}
